# Surcharger les paramètres de "genius.properties"
server.port=8091

server.ssl.enabled=true
server.ssl.key-alias=localhost-certificate
server.ssl.key-store-password=rudissl
server.ssl.key-password=rudissl
server.ssl.key-store=classpath:keystore/rudi-https-certificate.jks
server.ssl.key-store-type=PKCS12
#trust.store=${server.ssl.key-store}
#trust.store.password=${server.ssl.key-store-password}
trust.trust-all-certs=true

# Configuration BDD 
spring.datasource.url=jdbc:postgresql://localhost:5432/rudi
spring.datasource.username=konsent
spring.datasource.password=konsent
spring.jpa.show-sql=true

# Génération du script par hibernate + jpa
spring.flyway.enabled=true
spring.jpa.hibernate.ddl-auto=none
# Décommenter les lignes suivantes pour générer le fichier create_all_tables.sql à partir de toutes les @Entity du projet
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=../rudi-microservice-konsent-service/src/main/resources/bdd/create_all_tables.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

eureka.client.serviceURL.defaultZone=https://admin:4dM1nApp!@localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

eureka.instance.instance-id=${spring.application.name}:${random.uuid}
eureka.instance.hostname=localhost
eureka.instance.nonSecurePortEnabled=false
eureka.instance.securePortEnabled=true

eureka.client.tls.enabled=${server.ssl.enabled}
eureka.client.tls.key-store=${server.ssl.key-store}
eureka.client.tls.key-store-type=${server.ssl.key-store-type}
eureka.client.tls.key-password=${server.ssl.key-password}
eureka.client.tls.key-store-password=${server.ssl.key-store-password}
eureka.client.tls.trust-store=${eureka.client.tls.key-store}
eureka.client.tls.trust-store-password=${eureka.client.tls.key-password}
eureka.client.tls.trust-store-type=${server.ssl.key-store-type}

security.jwt.access.tokenKey=901c990dd69fb05617ccbbae01e73053da60099bb5a759e2286c40471af275eb9c55bc54cb4213db3ca29f528586b862251385f78052439c01fe22268e421b60

# Rudi OAuth2
module.oauth2.trust-all-certs=true
module.oauth2.provider-uri=https://localhost:8085/oauth/token
module.oauth2.scope=read,write
module.oauth2.client-id=konsent
module.oauth2.client-secret=rudi@123
module.oauth2.check-token-uri=https://localhost:8085/oauth/check_token

# Signature + Conversion to PDFA
rudi.pdf.sign.keyStorePath=keystore/rudi-consent.jks
rudi.pdf.sign.keyStorePassword=rudiconsent
rudi.pdf.sign.keyStoreKeyAlias=rudi-consent
rudi.pdf.sign.keyStoreKeyPassword=rudiconsent
rudi.pdf.ghostscriptEnabled=false
rudi.pdf.sign.debug=true

# Debug
java.security.debug=true
java.security.debug.x509=true
java.security.debug.certpath=true

freemarker.baseDirectory=/opt/rudi_tmp
freemarker.basePackage=templates

# SHA validation
rudi.consent.validate.sha.salt=SnnHdHXfR3IS
rudi.consent.revoke.sha.salt=3sujFC2Lu2fG
rudi.treatmentversion.publish.sha.salt=4S9Q1uG6Myre

rudi.konsent.scheduler.consent.delay=60000
rudi.konsent.scheduler.revoke.delay=60000
rudi.konsent.scheduler.treatment.delay=60000

# Min IO, stockage des PDF-A
rudi.documentstorage.endPoint=https://minio.rennes-metropole-rudi.karbon.open.global
rudi.documentstorage.bucketName=rudi-dev
rudi.documentstorage.identity=rudi
rudi.documentstorage.credential=m1niO-rudi
rudi.documentstorage.trustAllCerts=true
