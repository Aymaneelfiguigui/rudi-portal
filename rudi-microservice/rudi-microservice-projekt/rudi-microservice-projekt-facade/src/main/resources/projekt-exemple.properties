# Surcharger les paramètres de "genius.properties"
server.port=8089

# Configuration BDD 
spring.datasource.url=jdbc:postgresql://localhost:5432/rudi
spring.datasource.username=...
spring.datasource.password=...
spring.jpa.show-sql=true

# Génération du script par hibernate + jpa
spring.flyway.enabled=true
spring.jpa.hibernate.ddl-auto=none
# Décommenter les lignes suivantes pour générer le fichier create_all_tables.sql à partir de toutes les @Entity du projet
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=../rudi-microservice-projekt-service/src/main/resources/bdd/create_all_tables.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

eureka.client.serviceURL.defaultZone=http://...:...@localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

eureka.instance.instance-id=${spring.application.name}:${random.uuid}
eureka.instance.hostname=localhost

security.jwt.access.tokenKey=...

# Rudi OAuth2
module.oauth2.provider-uri=http://localhost:8085/oauth/token
module.oauth2.client-id=...
module.oauth2.client-secret=...
module.oauth2.scope=read,write
module.oauth2.check-token-uri=http://localhost:8085/oauth/check_token

# dataverse
dataverse.api.url=http://...:${dataverse.instance1.port}/api
dataverse.api.token=...
# dataverse Rudi Media
dataverse.api.rudi.media.data.alias=rudi_media_data
dataverse.api.rudi.data.alias=rudi_data
dataverse.api.rudi.archive.alias=rudi_archive

mail.smtp.host=10.50.1.45
mail.smtp.port=1025
email.urlServer=http://localhost:4200

# Conf locale de surcharge des templates de mail pour les devs (un repertoire quelque part sur la machine)
# bien mettre les mail dans un dossier "templates/lemail.txt"
freemarker.baseDirectory=/opt/rudi_tmp
