# Surcharger les paramètres de "genius.properties"
server.port=8090

server.ssl.enabled=true|false
server.ssl.key-alias=...
server.ssl.key-store-password=...
server.ssl.key-password=...
server.ssl.key-store=classpath:...
server.ssl.key-store-type=PKCS12
#trust.store=classpath:${server.ssl.key-store}
#trust.store.password=${server.ssl.key-store-password}
trust.trust-all-certs=true|false

# Configuration BDD 
spring.datasource.url=jdbc:postgresql://localhost:5432/rudi
spring.datasource.username=...
spring.datasource.password=...
spring.jpa.show-sql=true

# Génération du script par hibernate + jpa
spring.flyway.enabled=true
spring.jpa.hibernate.ddl-auto=none
# Décommenter les lignes suivantes pour générer le fichier create_all_tables.sql à partir de toutes les @Entity du projet
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=../rudi-microservice-selfdata-service/src/main/resources/bdd/create_all_tables.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

eureka.client.serviceURL.defaultZone=http(s)://...:...@localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.nonSecurePortEnabled=false
eureka.instance.securePortEnabled=true

eureka.instance.instance-id=${spring.application.name}:${random.uuid}
eureka.instance.hostname=localhost

eureka.client.tls.enabled=${server.ssl.enabled}
eureka.client.tls.key-store=${server.ssl.key-store}
eureka.client.tls.key-store-type=${server.ssl.key-store-type}
eureka.client.tls.key-password=${server.ssl.key-password}
eureka.client.tls.key-store-password=${server.ssl.key-store-password}
eureka.client.tls.trust-store=${eureka.client.tls.key-store}
eureka.client.tls.trust-store-password=${eureka.client.tls.key-password}
eureka.client.tls.trust-store-type=${server.ssl.key-store-type}

security.jwt.access.tokenKey=...

# Rudi OAuth2
module.oauth2.provider-uri=http(s)://localhost:8085/oauth/token
module.oauth2.check-token-uri=http://localhost:8085/oauth/check_token
module.oauth2.client-id=selfdata
module.oauth2.client-secret=...
module.oauth2.scope=read,write

# Conf locale de surcharge des templates de mail pour les devs (un repertoire quelque part sur la machine)
# bien mettre les mails dans un dossier "templates/lemail.txt"
freemarker.baseDirectory=/etc/rudi/config/selfdata
freemarker.basePackage=templates

rudi.selfdata.matchingdata.keystore.keystore-path=rudi-selfdata.jks
rudi.selfdata.matchingdata.keystore.keystore-password=...
rudi.selfdata.matchingdata.keystore.key-alias=...

# Conditionner le cache WSO2 à utiliser
apimanager.oauth2.client.registration.internal=false