# Surcharger les paramètres de "genius.properties"
server.port=0

server.ssl.enabled=true
server.ssl.key-alias=localhost-certificate
server.ssl.key-store-password=rudissl
server.ssl.key-password=rudissl
server.ssl.key-store=classpath:keystore/rudi-https-certificate.jks
server.ssl.key-store-type=PKCS12
#trust.store=classpath:keystore/rudi-https-certificate.jks
#trust.store.password=rudissl
trust.trust-all-certs=true

# Configuration BDD 
spring.datasource.url=jdbc:postgresql://localhost:5432/rudi
spring.datasource.username=template
spring.datasource.password=template
spring.jpa.show-sql=true

# Génération du script par hibernate + jpa
spring.flyway.enabled=true
spring.jpa.hibernate.ddl-auto=none
# Décommenter les lignes suivantes pour générer le fichier create_all_tables.sql à partir de toutes les Entity du projet
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=../rudi-microservice-template-service/src/main/resources/bdd/create_all_tables.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;

eureka.client.serviceURL.defaultZone=https://admin:4dM1nApp!@localhost:8761/eureka
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

eureka.instance.instance-id=${spring.application.name}:${random.uuid}
eureka.instance.hostname=localhost
eureka.instance.securePortEnabled=true
eureka.instance.nonSecurePortEnabled=true

eureka.client.tls.enabled=${server.ssl.enabled}
eureka.client.tls.key-store=${server.ssl.key-store}
eureka.client.tls.key-store-type=${server.ssl.key-store-type}
eureka.client.tls.key-password=${server.ssl.key-password}
eureka.client.tls.key-store-password=${server.ssl.key-store-password}
eureka.client.tls.trust-store=${trust.store}
eureka.client.tls.trust-store-password=${trust.store.password}
eureka.client.tls.trust-store-type=${server.ssl.key-store-type}

security.jwt.access.tokenKey=901c990dd69fb05617ccbbae01e73053da60099bb5a759e2286c40471af275eb9c55bc54cb4213db3ca29f528586b862251385f78052439c01fe22268e421b60

module.oauth2.trust-all-certs=true
module.oauth2.check-token-uri=https://localhost:8085/oauth/check_token
